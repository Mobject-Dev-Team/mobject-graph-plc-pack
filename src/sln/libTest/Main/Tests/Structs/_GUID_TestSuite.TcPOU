<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_GUID_TestSuite" Id="{fb0da540-e47b-0366-1ff3-959f9a114bc3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _GUID_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom_String();
TestTryDeserializeFrom_Structure();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{d7f9d27f-f77e-09de-26cd-528f2882c1bf}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _GUID;
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{892bed16-8c27-0137-2762-f74c6df93432}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _GUID;
	target : GUID;
    expected : GUID;
    actual : GUID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target.Data1 := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{6314d3b2-b896-051f-3f37-311ebc1b9dad}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _GUID;
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{03dcccd2-8532-0181-3976-04a92176a935}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _GUID;
    expected : STRING := 'GUID';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{78c0c3e3-6d56-0353-2981-381c4b377a93}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _GUID;
	target : GUID;
    expected : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    actual : GUID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target.Data1 := 1;
target.Data2 := 2;
target.Data3 := 3;
target.Data4[0] := 4;
target.Data4[1] := 5;
target.Data4[2] := 6;
target.Data4[3] := 7;
target.Data4[4] := 8;
target.Data4[5] := 9;
target.Data4[6] := 10;
target.Data4[7] := 11;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{ca288f9a-2f39-056d-161e-a479a0c8e0ea}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _GUID;
	target : GUID;
    expected : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    actual : GUID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Data1.Value := 1;
_type.Data2.Value := 2;
_type.Data3.Value := 3;
_type.Data4.Value[0] := 4;
_type.Data4.Value[1] := 5;
_type.Data4.Value[2] := 6;
_type.Data4.Value[3] := 7;
_type.Data4.Value[4] := 8;
_type.Data4.Value[5] := 9;
_type.Data4.Value[6] := 10;
_type.Data4.Value[7] := 11;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{0509226b-c531-04e1-3fa5-ad4ae39bacf4}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _GUID;
    serializer : JsonSerializer;
    expected : STRING(1000) := '{"typeName":"STRUCT","identifier":"GUID","members":{"Data1":{"typeName":"DWORD","minValue":0,"maxValue":4294967295,"isSigned":false,"isFloat":false},"Data2":{"typeName":"WORD","minValue":0,"maxValue":65535,"isSigned":false,"isFloat":false},"Data3":{"typeName":"WORD","minValue":0,"maxValue":65535,"isSigned":false,"isFloat":false},"Data4":{"typeName":"ARRAY","identifier":"ARRAY [0..7] OF BYTE","baseType":{"typeName":"BYTE","minValue":0,"maxValue":255,"isSigned":false,"isFloat":false}}}}';
    actual : STRING(1000);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{83175ec5-e238-0aa6-32c3-7ca511b45ce1}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _GUID;
    serializer : JsonSerializer;
    expected : STRING(500) := '{"Data1":1,"Data2":2,"Data3":3,"Data4":[4,5,6,7,8,9,10,11]}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

_type.Data1.Value := 1;
_type.Data2.Value := 2;
_type.Data3.Value := 3;
_type.Data4.Value[0] := 4;
_type.Data4.Value[1] := 5;
_type.Data4.Value[2] := 6;
_type.Data4.Value[3] := 7;
_type.Data4.Value[4] := 8;
_type.Data4.Value[5] := 9;
_type.Data4.Value[6] := 10;
_type.Data4.Value[7] := 11;

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{61113961-5717-034c-0c52-047f66f64f7e}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _GUID;
    expected : UDINT := SIZEOF(GUID);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom_String" Id="{2d5dc81f-c3a1-0ab9-2fa9-e7650f76b7cc}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom_String
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING(500) := '"123e4567-e89b-12d3-a456-426655440000"';
    _type : _GUID;
    expected : GUID := (Data1:=16#123E4567, Data2:=16#E89B, Data3:=16#12D3, Data4:=[16#A4, 16#56, 16#42, 16#66, 16#55, 16#44, 16#00, 16#00]);
    actual : GUID;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom_String');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom_Structure" Id="{fe9355f0-c663-007b-23f7-ca11fdc3ce88}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom_Structure
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING(500) := '{"Data1":1,"Data2":2,"Data3":3,"Data4":[4,5,6,7,8,9,10,11]}';
    _type : _GUID;
    expected : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    actual : GUID;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom_Structure');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{10224b5a-ce12-0a27-1983-7bf7d2af9c9c}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _GUID;
	target : _GUID;
    expected : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    actual : GUID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Data1.Value := 1;
target.Data2.Value := 2;
target.Data3.Value := 3;
target.Data4.Value[0] := 4;
target.Data4.Value[1] := 5;
target.Data4.Value[2] := 6;
target.Data4.Value[3] := 7;
target.Data4.Value[4] := 8;
target.Data4.Value[5] := 9;
target.Data4.Value[6] := 10;
target.Data4.Value[7] := 11;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{b29a4cff-4934-0086-30ae-802813ce2996}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _GUID;
	target : _GUID;
    expected : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    actual : GUID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Data1.Value := 1;
_type.Data2.Value := 2;
_type.Data3.Value := 3;
_type.Data4.Value[0] := 4;
_type.Data4.Value[1] := 5;
_type.Data4.Value[2] := 6;
_type.Data4.Value[3] := 7;
_type.Data4.Value[4] := 8;
_type.Data4.Value[5] := 9;
_type.Data4.Value[6] := 10;
_type.Data4.Value[7] := 11;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{fc35adc9-93c9-0470-23c9-07363c99f44a}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _GUID;
    expected : STRING := 'STRUCT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{19b4e055-06c3-0c80-012e-f13c048251b3}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _GUID;
	value : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    expected : GUID := (Data1 := 1, Data2 := 2, Data3 := 3, Data4 := [4,5,6,7,8,9,10,11]);
    actual : GUID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := value;
actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>